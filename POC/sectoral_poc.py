#!/usr/bin/env python3
"""
Sectoral - POC Pipeline de donn√©es sectorielles
D√©monstrateur d'ingestion et analyse de donn√©es financi√®res
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import warnings
warnings.filterwarnings('ignore')

class SectoralPOC:
    """Pipeline POC pour l'analyse sectorielle des march√©s financiers"""
    
    def __init__(self):
        # Portfolio repr√©sentatif par secteur (S&P 500)
        self.sectors_stocks = {
            'Technology': ['AAPL', 'MSFT', 'GOOGL', 'NVDA'],
            'Healthcare': ['JNJ', 'PFE', 'UNH', 'ABBV'], 
            'Finance': ['JPM', 'BAC', 'WFC', 'GS'],
            'Energy': ['XOM', 'CVX', 'COP', 'SLB'],
            'Consumer': ['AMZN', 'TSLA', 'HD', 'MCD']
        }
        
        # P√©riode d'analyse
        self.start_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
        self.end_date = datetime.now().strftime('%Y-%m-%d')
        
        # Stockage des donn√©es
        self.raw_data = {}
        self.sector_data = {}
        self.analytics = {}
        
    def ingest_data(self):
        """√âtape 1: Ingestion des donn√©es depuis Yahoo Finance"""
        print("üîÑ Ingestion des donn√©es financi√®res...")
        
        all_symbols = [stock for stocks in self.sectors_stocks.values() for stock in stocks]
        
        for symbol in all_symbols:
            try:
                ticker = yf.Ticker(symbol)
                data = ticker.history(start=self.start_date, end=self.end_date)
                
                if not data.empty:
                    self.raw_data[symbol] = data
                    print(f"‚úÖ {symbol}: {len(data)} jours de donn√©es")
                else:
                    print(f"‚ùå {symbol}: Aucune donn√©e")
                    
            except Exception as e:
                print(f"‚ùå Erreur pour {symbol}: {e}")
        
        print(f"\nüìä Total: {len(self.raw_data)} actions ing√©r√©es")
        return self
    
    def calculate_returns(self):
        """√âtape 2: Calcul des rendements et m√©triques de base"""
        print("\nüîÑ Calcul des rendements et m√©triques...")
        
        for symbol, data in self.raw_data.items():
            # Rendements quotidiens
            data['Daily_Return'] = data['Close'].pct_change()
            
            # Rendements cumul√©s
            data['Cumulative_Return'] = (1 + data['Daily_Return']).cumprod() - 1
            
            # Volatilit√© mobile 30 jours
            data['Volatility_30d'] = data['Daily_Return'].rolling(30).std() * np.sqrt(252)
            
            # Moving averages
            data['MA_20'] = data['Close'].rolling(20).mean()
            data['MA_50'] = data['Close'].rolling(50).mean()
            
            self.raw_data[symbol] = data
            
        print("‚úÖ M√©triques individuelles calcul√©es")
        return self
    
    def aggregate_by_sector(self):
        """√âtape 3: Agr√©gation par secteur"""
        print("\nüîÑ Agr√©gation par secteur...")
        
        for sector, stocks in self.sectors_stocks.items():
            sector_returns = []
            sector_prices = []
            
            for stock in stocks:
                if stock in self.raw_data:
                    sector_returns.append(self.raw_data[stock]['Daily_Return'])
                    sector_prices.append(self.raw_data[stock]['Close'])
            
            if sector_returns:
                # Moyenne pond√©r√©e √©gale des rendements du secteur
                sector_df = pd.DataFrame(sector_returns).T
                sector_df.columns = [f"{sector}_{stock}" for stock in stocks if stock in self.raw_data]
                
                # Rendement moyen du secteur
                sector_return = sector_df.mean(axis=1)
                
                # M√©triques sectorielles
                self.sector_data[sector] = {
                    'daily_returns': sector_return,
                    'cumulative_return': (1 + sector_return).cumprod() - 1,
                    'volatility': sector_return.rolling(30).std() * np.sqrt(252),
                    'total_return_1y': ((1 + sector_return).cumprod() - 1).iloc[-1],
                    'volatility_1y': sector_return.std() * np.sqrt(252),
                    'sharpe_ratio': (sector_return.mean() * 252) / (sector_return.std() * np.sqrt(252))
                }
                
                print(f"‚úÖ {sector}: Rendement 1Y = {self.sector_data[sector]['total_return_1y']:.2%}")
        
        return self
    
    def calculate_correlations(self):
        """√âtape 4: Calcul des corr√©lations inter-sectorielles"""
        print("\nüîÑ Calcul des corr√©lations...")
        
        # Matrice des rendements sectoriels
        sector_returns_df = pd.DataFrame({
            sector: data['daily_returns'] 
            for sector, data in self.sector_data.items()
        })
        
        # Matrice de corr√©lation
        correlation_matrix = sector_returns_df.corr()
        
        self.analytics['correlations'] = correlation_matrix
        print("‚úÖ Matrice de corr√©lation calcul√©e")
        
        return self
    
    def generate_insights(self):
        """√âtape 5: G√©n√©ration d'insights business"""
        print("\nüîÑ G√©n√©ration d'insights business...")
        
        insights = {}
        
        # Classement des secteurs par performance
        sector_performance = {
            sector: data['total_return_1y'] 
            for sector, data in self.sector_data.items()
        }
        
        sorted_sectors = sorted(sector_performance.items(), key=lambda x: x[1], reverse=True)
        
        insights['top_performer'] = sorted_sectors[0]
        insights['worst_performer'] = sorted_sectors[-1]
        
        # Secteur le moins volatil
        sector_volatility = {
            sector: data['volatility_1y'] 
            for sector, data in self.sector_data.items()
        }
        
        least_volatile = min(sector_volatility.items(), key=lambda x: x[1])
        insights['least_volatile'] = least_volatile
        
        # Meilleur ratio Sharpe
        sector_sharpe = {
            sector: data['sharpe_ratio'] 
            for sector, data in self.sector_data.items()
        }
        
        best_sharpe = max(sector_sharpe.items(), key=lambda x: x[1] if not np.isnan(x[1]) else -999)
        insights['best_sharpe'] = best_sharpe
        
        # Paires les plus/moins corr√©l√©es
        corr_matrix = self.analytics['correlations']
        
        # Masquer la diagonale
        corr_no_diag = corr_matrix.where(~np.eye(corr_matrix.shape[0], dtype=bool))
        
        # Plus haute corr√©lation
        max_corr_idx = np.unravel_index(np.nanargmax(corr_no_diag.values), corr_no_diag.shape)
        highest_corr = {
            'sectors': (corr_matrix.index[max_corr_idx[0]], corr_matrix.columns[max_corr_idx[1]]),
            'correlation': corr_matrix.iloc[max_corr_idx[0], max_corr_idx[1]]
        }
        
        # Plus faible corr√©lation
        min_corr_idx = np.unravel_index(np.nanargmin(corr_no_diag.values), corr_no_diag.shape)
        lowest_corr = {
            'sectors': (corr_matrix.index[min_corr_idx[0]], corr_matrix.columns[min_corr_idx[1]]),
            'correlation': corr_matrix.iloc[min_corr_idx[0], min_corr_idx[1]]
        }
        
        insights['highest_correlation'] = highest_corr
        insights['lowest_correlation'] = lowest_corr
        
        self.analytics['insights'] = insights
        print("‚úÖ Insights g√©n√©r√©s")
        
        return self
    
    def export_results(self):
        """√âtape 6: Export des r√©sultats"""
        print("\nüîÑ Export des r√©sultats...")
        
        # Export donn√©es brutes en CSV
        all_data = pd.DataFrame()
        for symbol, data in self.raw_data.items():
            temp_df = data.copy()
            temp_df['Symbol'] = symbol
            all_data = pd.concat([all_data, temp_df])
        
        all_data.to_csv('sectoral_raw_data.csv')
        print("‚úÖ Donn√©es brutes export√©es: sectoral_raw_data.csv")
        
        # Export m√©triques sectorielles
        sector_summary = pd.DataFrame({
            sector: {
                'Total_Return_1Y': data['total_return_1y'],
                'Volatility_1Y': data['volatility_1y'], 
                'Sharpe_Ratio': data['sharpe_ratio']
            }
            for sector, data in self.sector_data.items()
        }).T
        
        sector_summary.to_csv('sectoral_metrics.csv')
        print("‚úÖ M√©triques sectorielles export√©es: sectoral_metrics.csv")
        
        # Export corr√©lations
        self.analytics['correlations'].to_csv('sectoral_correlations.csv')
        print("‚úÖ Corr√©lations export√©es: sectoral_correlations.csv")
        
        return self
    
    def display_summary(self):
        """Affichage du r√©sum√© ex√©cutif"""
        print("\n" + "="*60)
        print("üéØ SECTORAL - R√âSUM√â EX√âCUTIF")
        print("="*60)
        
        insights = self.analytics['insights']
        
        print(f"\nüìà PERFORMANCE (12 mois)")
        print(f"ü•á Meilleur secteur: {insights['top_performer'][0]} (+{insights['top_performer'][1]:.2%})")
        print(f"ü•â Pire secteur: {insights['worst_performer'][0]} ({insights['worst_performer'][1]:.2%})")
        
        print(f"\n‚ö° RISQUE")
        print(f"üõ°Ô∏è  Moins volatil: {insights['least_volatile'][0]} ({insights['least_volatile'][1]:.2%} vol.)")
        print(f"üèÜ Meilleur Sharpe: {insights['best_sharpe'][0]} ({insights['best_sharpe'][1]:.2f})")
        
        print(f"\nüîó CORR√âLATIONS")
        high_corr = insights['highest_correlation']
        low_corr = insights['lowest_correlation']
        print(f"‚ûï Plus corr√©l√©s: {high_corr['sectors'][0]} ‚Üî {high_corr['sectors'][1]} ({high_corr['correlation']:.2f})")
        print(f"‚ûñ Moins corr√©l√©s: {low_corr['sectors'][0]} ‚Üî {low_corr['sectors'][1]} ({low_corr['correlation']:.2f})")
        
        print(f"\nüìä M√âTRIQUES D√âTAILL√âES")
        for sector, data in self.sector_data.items():
            print(f"{sector:12} | Rdt: {data['total_return_1y']:+6.2%} | Vol: {data['volatility_1y']:5.2%} | Sharpe: {data['sharpe_ratio']:5.2f}")
        
        print("\n" + "="*60)
        print("‚úÖ POC Sectoral termin√©e avec succ√®s!")
        print("üìÅ Fichiers g√©n√©r√©s: sectoral_*.csv")
        print("="*60)

def main():
    """Fonction principale - Ex√©cution de la POC"""
    print("üöÄ SECTORAL - POC Data Engineering Financier")
    print("Analyse sectorielle automatis√©e des march√©s\n")
    
    # Instanciation et ex√©cution du pipeline
    sectoral = SectoralPOC()
    
    try:
        (sectoral
         .ingest_data()
         .calculate_returns() 
         .aggregate_by_sector()
         .calculate_correlations()
         .generate_insights()
         .export_results()
         .display_summary())
         
    except Exception as e:
        print(f"‚ùå Erreur dans le pipeline: {e}")
        return False
    
    return True

if __name__ == "__main__":
    # Installation des d√©pendances requises
    print("üì¶ D√©pendances requises:")
    print("pip install yfinance pandas numpy")
    print("-" * 40)
    
    # Ex√©cution
    success = main()
    
    if success:
        print("\nüéâ POC r√©ussie! Pr√™t pour l'architecture compl√®te.")
    else:
        print("\nüí• POC √©chou√©e. V√©rifiez les d√©pendances et la connexion.")